#include <fstream>
#include <iostream>
#include <string.h>
#include "text_class.h"
#define MAX(m,n) (m>n ? m : n)
using namespace std;

text_ed::text_ed () {
	last_line = 0;
	buffer_last_line = 0;
	current_file [0];
	line_numbering = false;
}

bool text_ed::copy_to_buffer ( int start, int end ) {}

bool text_ed::close_up ( int start, int end ) {}

bool text_ed::copy_to_document ( int start ) {}

bool text_ed::open_up ( int start, int num_lines ) {}

int text_ed::strindex ( char * haystack, char * needle ) {}

bool strncopy ( char * dest, int loc, char * src, int n ) {}

bool text_ed::load_file ( filename fn ) {
<<<<<<< .mine
  ifstream f ( fn );
  strncpy ( current_file, fn, FILENAME_LENGTH );
  last_line = 0;
  for (;;) {
    last_line++;
    f.getline ( document[ last_line ],MAX_COLUMNS + 1 );
    if ( f.gcount () == 0 ) {
      last_line--;
	 break;
    }
=======
	cerr << "Into load_file function." << endl;
	ifstream f ( fn );
	cout << "debug-1" << endl;
	strncpy ( current_file, fn, FILENAME_LENGTH );
	cout << "debug-2" << endl;
	last_line = 0;
	cout << "debug-3" << endl;
	for (;;) {
		last_line++;
		f.getline ( document[ last_line ],MAX_COLUMNS + 1 );
		cout << "debug-4" << endl;
		if ( f.gcount () == 0 ) {
			last_line--;
			cout << "debug-5" << endl;
			break;
		}
>>>>>>> .r112
    line_length [ last_line ] = strlen ( document [ last_line ] );
    if ( line_length [ last_line ] == f.gcount () ) {
		f.clear ();
		}
	}
	f.close ();
	return true;
}

bool text_ed::save_file () {
	int i;
	ofstream f ( current_file );
	for ( i=1; i<=last_line; i++ ) {
		f << document [ i ] << endl;
	}
	f.close ();
	return true;
}

bool text_ed::save_file ( filename ) {}

bool text_ed::insert_line ( textline src, int n ) {}

bool text_ed::delete_lines ( int start, int end ) {}

bool text_ed::get_line ( textline dest, int n ) {}

bool text_ed::copy_lines ( int start, int end, int location ) {}

bool text_ed::move_lines ( int start, int end, int location ) {}

bool text_ed::replace ( char * oldstr, char * newstr, int location ) {}

// Getters & Setters
void text_ed::get_filename ( filename ) {}
int text_ed::get_last_line () {}

bool text_ed::get_lineNumbering() {
	return text_ed::line_numbering;
}

void text_ed::toggle_lineNumbering() {
	if (text_ed::line_numbering == false) text_ed::line_numbering = true;
	else text_ed::line_numbering = false;
}
