#include <fstream>
#include <iostream>
#include <string.h>
#include "text_class.h"
#define MAX(m,n) (m>n ? m : n)
using namespace std;

text_ed::text_ed () {
	last_line = 0;
	buffer_last_line = 0;
	current_file [0];
	line_numbering = false;
}

bool text_ed::copy_to_buffer ( int start, int end ) {}

bool text_ed::close_up ( int start, int end ) {}

bool text_ed::copy_to_document ( int start ) {}

bool text_ed::open_up ( int start, int num_lines ) {}

int text_ed::strindex ( char * haystack, char * needle ) {}

bool strncopy ( char * dest, int loc, char * src, int n ) {}

bool text_ed::load_file ( filename fn ) {
		cerr << "Into load_file function." << endl;			//debug
	ifstream f ( fn );
		cerr << "debug-1 -- ifstream f()" << endl;							//debug
	strncpy ( current_file, fn, FILENAME_LENGTH );
		cerr << "debug-2 -- strncpy stuff" << endl;							//debug
	last_line = 0;
		cerr << "debug-3 -- set last_line = 0" << endl;							//debug
	for (;;) {
		last_line++;
		f.getline ( document[ last_line ],MAX_COLUMNS + 1 );
			cerr << "debug-4 -- in loop -- did f.getline" << endl;								//debug
		if ( f.gcount () == 0 ) {
			last_line--;
			cerr << "debug-5 -- did last line" << endl;							//debug
			break;
		}
    line_length [ last_line ] = strlen ( document [ last_line ] );
    if ( line_length [ last_line ] == f.gcount () ) {
		f.clear ();
		}
	}
	f.close ();
	return true;
}

bool text_ed::save_file () {
	int i;
	ofstream f ( /*"testfileout.txt"*/ current_file);
	for ( i=1; i<=last_line; i++ ) {
		f << document [ i ] << endl;
		cerr << document[ i ] << endl;	
	}
	f.close ();
	return true;
}

bool text_ed::save_file ( filename fn ) {
  int i;
  ofstream f ( fn );
  for ( i=1; i<=last_line; i++ ) {
	f << document [i] << endl;
	cerr << document [i] << endl;
  }
  f.close();
  return true;
}

bool text_ed::insert_line ( /*textline src,*/ int n ) {
cerr << "Into function" << endl;	

}

bool text_ed::delete_lines ( int start, int end ) {}

bool text_ed::get_line ( textline dest, int n ) {}

bool text_ed::copy_lines ( int start, int end, int location ) {}

bool text_ed::move_lines ( int start, int end, int location ) {}

bool text_ed::replace ( char * oldstr, char * newstr, int location ) {}


// Getters & Setters

bool text_ed::get_lineNumbering() {
	return line_numbering;
}

void text_ed::toggle_lineNumbering() {
	if (line_numbering == false) line_numbering = true;
	else line_numbering = false;
}

void text_ed::get_filename ( filename ) {
	return;
}
int text_ed::get_last_line () { return last_line; }

bool text_ed::display_file( int m, int n) {
	int i;
	for ( i=m; i<=n; i++ ) {
		if (line_numbering) {
			cerr << i << '\t' << document[ i ] << endl;
		} else {
			cerr << '\t' << document[ i ] << endl;
		}
	}
	cerr << endl;
	return true;
}
